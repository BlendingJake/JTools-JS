// Generated from src/grammar/JQL.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class JQLLexer extends Lexer {
	public static readonly T__0 = 1;
	public static readonly T__1 = 2;
	public static readonly T__2 = 3;
	public static readonly T__3 = 4;
	public static readonly T__4 = 5;
	public static readonly T__5 = 6;
	public static readonly T__6 = 7;
	public static readonly T__7 = 8;
	public static readonly T__8 = 9;
	public static readonly PRIMITIVE = 10;
	public static readonly LPAREN = 11;
	public static readonly RPAREN = 12;
	public static readonly DOT = 13;
	public static readonly LBRACKET = 14;
	public static readonly RBRACKET = 15;
	public static readonly COMMA = 16;
	public static readonly LBRACE = 17;
	public static readonly RBRACE = 18;
	public static readonly SEMI = 19;
	public static readonly AT = 20;
	public static readonly DOLLAR = 21;
	public static readonly DIGITS = 22;
	public static readonly LETTERS = 23;
	public static readonly STRING = 24;
	public static readonly WS = 25;
	public static readonly LAST = 26;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"PRIMITIVE", "LPAREN", "RPAREN", "DOT", "LBRACKET", "RBRACKET", "COMMA", 
		"LBRACE", "RBRACE", "SEMI", "AT", "DOLLAR", "DIGITS", "LETTERS", "STRING", 
		"WS", "LAST",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'='", "'+'", "'-'", "'/'", "'//'", "'*'", "'%'", "'**'", "'_'", 
		undefined, "'('", "')'", "'.'", "'['", "']'", "','", "'{'", "'}'", "':'", 
		"'@'", "'$'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, undefined, undefined, undefined, undefined, undefined, undefined, 
		undefined, undefined, undefined, "PRIMITIVE", "LPAREN", "RPAREN", "DOT", 
		"LBRACKET", "RBRACKET", "COMMA", "LBRACE", "RBRACE", "SEMI", "AT", "DOLLAR", 
		"DIGITS", "LETTERS", "STRING", "WS", "LAST",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(JQLLexer._LITERAL_NAMES, JQLLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return JQLLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(JQLLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "JQL.g4"; }

	// @Override
	public get ruleNames(): string[] { return JQLLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return JQLLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return JQLLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return JQLLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x02\x1C\x94\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x03\x02\x03" +
		"\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03" +
		"\x06\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\n\x03\n\x03\v\x03" +
		"\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x03\v\x05" +
		"\vY\n\v\x03\f\x03\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10" +
		"\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14" +
		"\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x06\x17r\n\x17\r\x17\x0E\x17" +
		"s\x03\x18\x06\x18w\n\x18\r\x18\x0E\x18x\x03\x19\x03\x19\x03\x19\x03\x19" +
		"\x07\x19\x7F\n\x19\f\x19\x0E\x19\x82\v\x19\x03\x19\x03\x19\x03\x19\x03" +
		"\x19\x03\x19\x07\x19\x89\n\x19\f\x19\x0E\x19\x8C\v\x19\x03\x19\x05\x19" +
		"\x8F\n\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x02\x02\x02\x1C\x03\x02\x03" +
		"\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02\t\x11\x02" +
		"\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x1D\x02\x10\x1F" +
		"\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02\x15)\x02\x16+\x02\x17-\x02\x18" +
		"/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C\x03\x02\b\x03\x022;\x04\x02C\\c|" +
		"\x03\x02$$\x03\x02))\x05\x02\v\f\x0E\x0F\"\"\x03\x02\f\f\x02\x9C\x02\x03" +
		"\x03\x02\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t" +
		"\x03\x02\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03" +
		"\x02\x02\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03" +
		"\x02\x02\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03" +
		"\x02\x02\x02\x02\x1D\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03" +
		"\x02\x02\x02\x02#\x03\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02" +
		"\x02\x02)\x03\x02\x02\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02" +
		"/\x03\x02\x02\x02\x021\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02" +
		"\x02\x02\x037\x03\x02\x02\x02\x059\x03\x02\x02\x02\x07;\x03\x02\x02\x02" +
		"\t=\x03\x02\x02\x02\v?\x03\x02\x02\x02\rB\x03\x02\x02\x02\x0FD\x03\x02" +
		"\x02\x02\x11F\x03\x02\x02\x02\x13I\x03\x02\x02\x02\x15X\x03\x02\x02\x02" +
		"\x17Z\x03\x02\x02\x02\x19\\\x03\x02\x02\x02\x1B^\x03\x02\x02\x02\x1D`" +
		"\x03\x02\x02\x02\x1Fb\x03\x02\x02\x02!d\x03\x02\x02\x02#f\x03\x02\x02" +
		"\x02%h\x03\x02\x02\x02\'j\x03\x02\x02\x02)l\x03\x02\x02\x02+n\x03\x02" +
		"\x02\x02-q\x03\x02\x02\x02/v\x03\x02\x02\x021\x8E\x03\x02\x02\x023\x90" +
		"\x03\x02\x02\x025\x92\x03\x02\x02\x0278\x07?\x02\x028\x04\x03\x02\x02" +
		"\x029:\x07-\x02\x02:\x06\x03\x02\x02\x02;<\x07/\x02\x02<\b\x03\x02\x02" +
		"\x02=>\x071\x02\x02>\n\x03\x02\x02\x02?@\x071\x02\x02@A\x071\x02\x02A" +
		"\f\x03\x02\x02\x02BC\x07,\x02\x02C\x0E\x03\x02\x02\x02DE\x07\'\x02\x02" +
		"E\x10\x03\x02\x02\x02FG\x07,\x02\x02GH\x07,\x02\x02H\x12\x03\x02\x02\x02" +
		"IJ\x07a\x02\x02J\x14\x03\x02\x02\x02KL\x07v\x02\x02LM\x07t\x02\x02MN\x07" +
		"w\x02\x02NY\x07g\x02\x02OP\x07h\x02\x02PQ\x07c\x02\x02QR\x07n\x02\x02" +
		"RS\x07u\x02\x02SY\x07g\x02\x02TU\x07p\x02\x02UV\x07w\x02\x02VW\x07n\x02" +
		"\x02WY\x07n\x02\x02XK\x03\x02\x02\x02XO\x03\x02\x02\x02XT\x03\x02\x02" +
		"\x02Y\x16\x03\x02\x02\x02Z[\x07*\x02\x02[\x18\x03\x02\x02\x02\\]\x07+" +
		"\x02\x02]\x1A\x03\x02\x02\x02^_\x070\x02\x02_\x1C\x03\x02\x02\x02`a\x07" +
		"]\x02\x02a\x1E\x03\x02\x02\x02bc\x07_\x02\x02c \x03\x02\x02\x02de\x07" +
		".\x02\x02e\"\x03\x02\x02\x02fg\x07}\x02\x02g$\x03\x02\x02\x02hi\x07\x7F" +
		"\x02\x02i&\x03\x02\x02\x02jk\x07<\x02\x02k(\x03\x02\x02\x02lm\x07B\x02" +
		"\x02m*\x03\x02\x02\x02no\x07&\x02\x02o,\x03\x02\x02\x02pr\t\x02\x02\x02" +
		"qp\x03\x02\x02\x02rs\x03\x02\x02\x02sq\x03\x02\x02\x02st\x03\x02\x02\x02" +
		"t.\x03\x02\x02\x02uw\t\x03\x02\x02vu\x03\x02\x02\x02wx\x03\x02\x02\x02" +
		"xv\x03\x02\x02\x02xy\x03\x02\x02\x02y0\x03\x02\x02\x02z\x80\x07$\x02\x02" +
		"{|\x07^\x02\x02|\x7F\x07$\x02\x02}\x7F\n\x04\x02\x02~{\x03\x02\x02\x02" +
		"~}\x03\x02\x02\x02\x7F\x82\x03\x02\x02\x02\x80~\x03\x02\x02\x02\x80\x81" +
		"\x03\x02\x02\x02\x81\x83\x03\x02\x02\x02\x82\x80\x03\x02\x02\x02\x83\x8F" +
		"\x07$\x02\x02\x84\x8A\x07)\x02\x02\x85\x86\x07^\x02\x02\x86\x89\x07)\x02" +
		"\x02\x87\x89\n\x05\x02\x02\x88\x85\x03\x02\x02\x02\x88\x87\x03\x02\x02" +
		"\x02\x89\x8C\x03\x02\x02\x02\x8A\x88\x03\x02\x02\x02\x8A\x8B\x03\x02\x02" +
		"\x02\x8B\x8D\x03\x02\x02\x02\x8C\x8A\x03\x02\x02\x02\x8D\x8F\x07)\x02" +
		"\x02\x8Ez\x03\x02\x02\x02\x8E\x84\x03\x02\x02\x02\x8F2\x03\x02\x02\x02" +
		"\x90\x91\t\x06\x02\x02\x914\x03\x02\x02\x02\x92\x93\n\x07\x02\x02\x93" +
		"6\x03\x02\x02\x02\v\x02Xsx~\x80\x88\x8A\x8E\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!JQLLexer.__ATN) {
			JQLLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(JQLLexer._serializedATN));
		}

		return JQLLexer.__ATN;
	}

}

